{"version":3,"sources":["components/Cell/Cell.component.js","components/Row/Row.component.js","components/Box/Box.component.js","App.js","index.js"],"names":["Cell","_ref","value","cellclickHandler","react_default","a","createElement","className","concat","onClick","defaultProps","noop","Row","cellData","rowID","Cell_component","getUpdatedCells","oldState","cellIndex","isXNext","foundRow","find","rowData","id","selectedRowIndex","indexOf","newCellValue","items","replaceIndex","updatedRow","getWinner","boxState","flatBox","winner","forEach","row","push","apply","Object","toConsumableArray","every","line","_line","slicedToArray","b","c","Box","initialState","boxData","uuid","_useState","useState","_useState2","state","setState","reset","newboxData","swal","then","map","Row_component","key","App","Box_component","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f2749441.chunk.js","sourcesContent":["import './Cell.style.css';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport noop from 'lodash/noop';\n\n\nconst Cell = ({value, cellclickHandler}) =>\n  <div className={`cell ${value ? 'disabled-cell' : '' }`} onClick={cellclickHandler} >{value}</div>;\n\n\nCell.propTypes = {\n  'cellclickHandler': PropTypes.func.isRequired,\n  'value': PropTypes.oneOf([\n    'X',\n    'O',\n    ''\n  ]).isRequired\n};\nCell.defaultProps = {\n  'cellclickHandler': noop,\n  'value': ''\n};\n\nexport default Cell;\n","import Cell from '../Cell/Cell.component';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport noop from 'lodash/noop';\n\nconst Row = ({cellData, cellclickHandler, rowID}) =>\n  <div className='row'>\n    <Cell value={cellData[0]} cellclickHandler={cellclickHandler(rowID, 0)}/>\n    <Cell value={cellData[1]} cellclickHandler={cellclickHandler(rowID, 1)}/>\n    <Cell value={cellData[2]} cellclickHandler={cellclickHandler(rowID, 2)}/>\n  </div>;\n\nRow.propTypes = {\n  'cellclickHandler': PropTypes.func.isRequired,\n  'cellData': PropTypes.array.isRequired,\n  'rowID' : PropTypes.string.isRequired\n};\nRow.defaultProps = {\n  'cellclickHandler': noop,\n  'cellData': '',\n  'rowID': 'XX'\n};\nexport default Row;\n","import React, {useState} from 'react';\nimport Row from '../Row/Row.component';\nimport replaceIndex from 'replace-array-index';\nimport swal from 'sweetalert';\nimport uuid from 'uuid';\n\nconst getUpdatedCells = (oldState, rowID, cellIndex, isXNext) => {\n  const foundRow = oldState.find((rowData) => rowData.id === rowID);\n  if (!foundRow) {\n    return;\n  }\n  const selectedRowIndex = oldState.indexOf(foundRow);\n  const newCellValue = isXNext ? 'X' : 'O';\n  const items = replaceIndex(foundRow.items, cellIndex, newCellValue);\n  const updatedRow = {id: rowID, items};\n  const newBoxData = replaceIndex(oldState, selectedRowIndex, updatedRow);\n  return newBoxData;\n};\n\nconst getWinner = (boxState) => {\n  const MATCHING_POSITIONS = [\n    [0, 1, 2], [3, 4, 5],\n    [6, 7, 8], [0, 3, 6],\n    [1, 4, 7], [2, 5, 8],\n    [0, 4, 8], [2, 4, 6]\n  ];\n  const flatBox = [];\n  let winner = '';\n  boxState.forEach((row) => {\n    flatBox.push(...row.items);\n  });\n  MATCHING_POSITIONS.every((line) => {\n    const [a, b, c] = line;\n    if (flatBox[a] && flatBox[a] === flatBox[b] && flatBox[a] === flatBox[c]) {\n      winner = flatBox[a];\n      return false;\n    }\n    return true;\n  });\n  return winner;\n};\n\nfunction Box () {\n  const initialState =  {\n    boxData: [\n      {'items': ['', '', ''], 'id': uuid()},\n      {'items':  ['', '', ''], 'id': uuid()},\n      {'items':  ['', '', ''], 'id': uuid()}\n    ],\n    isXNext: true\n  };\n  const [state, setState] = useState(initialState);\n  const reset = () => setState(initialState);\n  \n  const cellclickHandler = (rowID, cellIndex) => () => {\n    const {boxData, isXNext} = state;\n    const newboxData = getUpdatedCells(boxData, rowID, cellIndex, isXNext);\n    if (boxData) {\n      setState({boxData: newboxData, isXNext: !isXNext});\n      const winner = getWinner(newboxData);\n      if (winner) {\n        swal('Congratulations!', `Player ${winner} is the winner`, 'success').then(reset);\n      }\n    }\n  };\n\n  return (\n    <div className='box'>{state.boxData.map((rowData) => <Row cellData={rowData.items}\n    key={rowData.id} rowID={rowData.id} cellclickHandler={cellclickHandler} />)}</div>\n  );\n}\n\nexport default Box;\n","import './App.css';\nimport Box from './components/Box/Box.component';\nimport React, {Component} from 'react';\nclass App extends Component {\n  render () {\n    return (\n      <div className='box-container'>\n        <Box />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// Import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// RegisterServiceWorker();\n"],"sourceRoot":""}